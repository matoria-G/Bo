/*
 * Generated by XDoclet - Do not edit!
 */
package test.ejb.cmr;

/**
 * Value object for EmployeeAddress.
 *
 * Notice, this object is used to represent the state of an 
 * EmployeeAddress object. This value object
 * Is not connected to the database in any way, it is just a normal object used 
 * as a container for data from an EJB. 
 *
 * @xdoclet-generated at 16-04-05
 * @copyright The XDoclet Team
 * @author XDoclet
 * @version 1.2.3
 */
public class EmployeeAddressValue
   extends java.lang.Object
   implements java.io.Serializable, java.lang.Cloneable 
{

   private java.lang.Integer id;
   private boolean idHasBeenSet = false;

   private java.lang.String description;
   private boolean descriptionHasBeenSet = false;

   private java.lang.Integer primaryKey;

   public EmployeeAddressValue()
   {
   }

   public EmployeeAddressValue( java.lang.Integer id,java.lang.String description )
   {
       setId(id);
       setDescription(description);
	   primaryKey = this.getId();
   }

   /**
    * @deprecated use {@link #clone}
    */
   public EmployeeAddressValue( EmployeeAddressValue otherValue )
   {
	  this.id = otherValue.id;
	  idHasBeenSet = true;
	  this.description = otherValue.description;
	  descriptionHasBeenSet = true;

	  primaryKey = this.getId();
   }

   public java.lang.Integer getPrimaryKey()
   {
	  return primaryKey;
   }

   public void setPrimaryKey( java.lang.Integer primaryKey)
   {
      // it's also nice to update PK object - just in case
      // somebody would ask for it later...
      this.primaryKey = primaryKey;
	  setId( primaryKey );
   }

   public java.lang.Integer getId()
   {
	  return this.id;
   }

   public void setId( java.lang.Integer id )
   {
	  this.id = id;
	  idHasBeenSet = true;

      primaryKey = id;
   }

   public boolean idHasBeenSet(){
	  return idHasBeenSet;
   }
   public java.lang.String getDescription()
   {
	  return this.description;
   }

   public void setDescription( java.lang.String description )
   {
	  this.description = description;
	  descriptionHasBeenSet = true;

   }

   public boolean descriptionHasBeenSet(){
	  return descriptionHasBeenSet;
   }

   public String toString()
   {
	  StringBuffer str = new StringBuffer("{");

	  str.append("id=" + getId() + " " + "description=" + getDescription());
	  str.append('}');

	  return(str.toString());
   }

   /**
    * A Value Object has an identity if the attributes making its Primary Key have all been set. An object without identity is never equal to any other object.
    *
    * @return true if this instance has an identity.
    */
   protected boolean hasIdentity()
   {
	  return idHasBeenSet;
   }

   /**
    *
    * @deprecated use {@link #equals}
    */
   public boolean isIdentical(Object other)
   {
          if (other instanceof EmployeeAddressValue)
          {
                 EmployeeAddressValue that = (EmployeeAddressValue) other;
                 boolean lEquals = true;
                 if( this.id == null )
                 {
                        lEquals = lEquals && ( that.id == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.id.equals( that.id );
                 }
                 if( this.description == null )
                 {
                        lEquals = lEquals && ( that.description == null );
                 }
                 else
                 {
                        lEquals = lEquals && this.description.equals( that.description );
                 }

                 return lEquals;
          }
          else
          {
                 return false;
          }
   }

    public boolean equals(Object other) {

        //If it's not the correct type, clearly it isn't equal to this.
        if (!(other instanceof EmployeeAddressValue)) { 
            return false;
        }

        return equals((EmployeeAddressValue) other);
    }

    /**
     * This class is not using strict ordering. This means that the object is not Comparable, and
     * each check for equality will test all members for equality. We do not check collections for
     * equality however, so you would be wise to not use this if you have collection typed EJB References.
     */
    public boolean equals(EmployeeAddressValue that) {

        //try to get lucky.
        if (this == that) {
            return true;
        }
        //this clearly isn't null.
        if(null == that) {
            return false;
        }

        if(this.id != that.id) {

            if( this.id == null || that.id == null ) {
                return false;
            }

            if(!this.id.equals(that.id)) {
                return false;
            }

        }

        if(this.description != that.description) {

            if( this.description == null || that.description == null ) {
                return false;
            }

            if(!this.description.equals(that.description)) {
                return false;
            }

        }

        return true;

    }

    public Object clone() throws java.lang.CloneNotSupportedException {
        EmployeeAddressValue other = (EmployeeAddressValue) super.clone();

        return other;
    }

    public ReadOnlyEmployeeAddressValue getReadOnlyEmployeeAddressValue() {
        return new ReadOnlyEmployeeAddressValue();
    }

    public int hashCode(){
	  int result = 17;
      result = 37*result + ((this.id != null) ? this.id.hashCode() : 0);

      result = 37*result + ((this.description != null) ? this.description.hashCode() : 0);

	  return result;
    }

    /**
     * Covariant function so the compiler can choose the proper one at compile time,
     * eliminates the need for XDoclet to really understand compiletime typing.
     *
     * Read only collections need to be synchronized. Once we start giving out handles
     * to these collections, they'll be used in other threads sooner or later. 
     */
    private static java.util.Collection wrapCollection(java.util.Collection input) {
        return java.util.Collections.synchronizedCollection(input);
    }
    /**
     * Covariant function so the compiler can choose the proper one at compile time,
     * eliminates the need for XDoclet to really understand compiletime typing.
     *
     * Read only collections need to be synchronized. Once we start giving out handles
     * to these collections, they'll be used in other threads sooner or later. 
     */
    private static java.util.Set wrapCollection(java.util.Set input) {
        return java.util.Collections.synchronizedSet(input);
    }
    /**
     * Covariant function. This is used in covariant form so that the compiler
     * can do some of our conditional branches for us. If I made these functions
     * have different names, then XDoclet would have to choose between them based on 
     * compiletime types, that wouldn't be easy. 
     */
    private static java.util.Collection wrapReadOnly(java.util.Collection input) {
        return java.util.Collections.unmodifiableCollection(input);
    }
    /**
     * Covariant function. This is used in covariant form so that the compiler
     * can do some of our conditional branches for us. If I made these functions
     * have different names, then XDoclet would have to choose between them based on 
     * compiletime types, that wouldn't be easy. 
     */
    private static java.util.Set wrapReadOnly(java.util.Set input) {
        return java.util.Collections.unmodifiableSet(input);
    }

    private final class ReadOnlyEmployeeAddressValue 
    implements java.lang.Cloneable, java.io.Serializable 
    {
        private EmployeeAddressValue underlying() {
            return EmployeeAddressValue.this;
        }

       public java.lang.Integer getId() {
              return underlying().id;
       }

       public java.lang.String getDescription() {
              return underlying().description;
       }

        public int hashCode() {
            return 101 * underlying().hashCode();
        }

        public boolean equals(Object o) {
            if(o instanceof ReadOnlyEmployeeAddressValue) {
                return this.equals((ReadOnlyEmployeeAddressValue) o);
            }
            return false;
        }

        public boolean equals(ReadOnlyEmployeeAddressValue that) {
            if(null == that) {
                return false;
            }

            return this.underlying().equals(that.underlying());
        }

    }

}
